AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Stack template for creating a single virtual machine host

Parameters:
  ProjectNameParam:
    Type: String
    Description: Enter value for project name tag
    Default: "network"
  EnvParam:
    Type: String
    Description: Enter value for environment tag
    Default: "dev"
    AllowedValues:
      - "prod"
      - "dev"
      - "qa"
      - "test"
  ResourceRandom:
    Type: String
    Description: Characters appended to resource name to differentiate stack resources
  NetworkStackName:
    Type: String
    Description: Name of networking stack with exported resources
  NetworkStackVpc:
    Type: String
    Description: Name of exported Vpc in networking stack
  NetworkStackPublicSubnet1Id:
    Type: String
    Description: Name of exported public subnet 1 id in networking stack
  NetworkStackPublicSubnet1Az:
    Type: String
    Description: Name of exported public subnet 1 az in networking stack
  NetworkStackPrivateSubnet1Id:
    Type: String
    Description: Name of exported private subnet 1 id in networking stack
  NetworkStackPrivateSubnet1Az:
    Type: String
    Description: Name of exported private subnet 1 az in networking stack
  NetworkStackPublicSubnet2Id:
    Type: String
    Description: Name of exported public subnet 2 id in networking stack
  NetworkStackPublicSubnet2Az:
    Type: String
    Description: Name of exported public subnet 2 az in networking stack
  NetworkStackPrivateSubnet2Id:
    Type: String
    Description: Name of exported private subnet 2 id in networking stack
  NetworkStackPrivateSubnet2Az:
    Type: String
    Description: Name of exported private subnet 2 az in networking stack

Mappings:
  InstanceTypes:
    dev:
      "instanceType": "t3.small"
    test:
      "instanceType": "t4g.xlarge"
    prod:
      "instanceType": "t4g.2xlarge"
  CidrBlockMap:
    InternetBlockIpv4:
      "block": "0.0.0.0/0"
    InternetBlockIpv6:
      "block": "::/0"
    VpcBlock:
      "block": "10.0.0.0/16"
    PublicBlock1:
      "block": "10.0.0.0/24"
    PrivateBlock1:
      "block": "10.0.1.0/24"
    PublicBlock2:
      "block": "10.0.2.0/24"
    PrivateBlock2:
      "block": "10.0.3.0/24"

Resources:
  SshKey:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Sub "${ProjectNameParam}-vm-sshkey-${ResourceRandom}-${EnvParam}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-vm-sshkey-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "Symmetric encryption key for server ${ProjectNameParam}"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub "${ProjectNameParam}-key-${ResourceRandom}-${EnvParam}"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt [InstanceRole, Arn]
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/developer-admin'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: "SYMMETRIC_DEFAULT"
      KeyUsage: "ENCRYPT_DECRYPT"
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-encrypt-key-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Sg for server host
      GroupName: !Sub "${ProjectNameParam}-ec2-sg-${ResourceRandom}-${EnvParam}"
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackVpc}"
      SecurityGroupIngress:
        - CidrIp: !FindInMap [ CidrBlockMap, InternetBlockIpv4, block ]
          Description: "All Ipv4"
          ToPort: -1
          IpProtocol: "-1"
        - CidrIpv6: !FindInMap [ CidrBlockMap, InternetBlockIpv6, block ]
          Description: "All Ipv6"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      SecurityGroupEgress:
          - CidrIp: !FindInMap [ CidrBlockMap, InternetBlockIpv4, block ]
            Description: "All Ipv4"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
          - CidrIpv6: !FindInMap [ CidrBlockMap, InternetBlockIpv6, block ]
            Description: "All Ipv6"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-ec2-sg-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  SecurityGroupIngressSelfRef:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: SecurityGroup
    Properties:
      GroupId:
        Ref: SecurityGroup
      SourceSecurityGroupId:
        Ref: SecurityGroup
      Description: "self reference"
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectNameParam}-ec2-role-${ResourceRandom}-${EnvParam}"
      Path: "/developer/"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DeveloperPermissionBoundaryPolicy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: JenkinsPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn: InstanceRole
    Properties:
      InstanceProfileName: !Sub "${ProjectNameParam}-ec2-ip-${ResourceRandom}-${EnvParam}"
      Path: "/developer/"
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${ProjectNameParam}-launch-template-${ResourceRandom}-${EnvParam}"
      LaunchTemplateData:
        KeyName: !Ref SshKey
        InstanceType: !FindInMap [InstanceTypes, !Ref EnvParam, instanceType]
        ImageId: "ami-005f9685cb30f234b"
        IamInstanceProfile:
          Arn: !GetAtt [InstanceProfile, Arn]
        Monitoring:
          Enabled: true
        PrivateDnsNameOptions:
          EnableResourceNameDnsARecord: true
          HostnameType: "resource-name"
        NetworkInterfaces:
          - Description: "VM ENI"
            DeleteOnTermination: true
            AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref SecurityGroup
            SubnetId:
             Fn::ImportValue: !Sub "${NetworkStackPublicSubnet1Id}"
        BlockDeviceMappings:
          - DeviceName: "/dev/sdz"
            Ebs:
              DeleteOnTermination: True
              Encrypted: True
              VolumeSize: 50
              VolumeType: "gp3"
        UserData:
          Fn::Base64:
            Fn::Join: ["\n\n", [
              "#!/bin/bash",
              "echo -e '\n\n\n Updating package repository'",
              "yum update -y",
              "echo -e '\n\n\n Installing SSM agent'",
              "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
              "echo -e '\n\n\n Installing EC2 connect agent'",
              "yum install -y ec2-instance-connect",
              "echo -e '\n\n\n Setting up Jenkins Repo'",
              "wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo",
              "echo -e '\n\n\n Import public key file'",
              "rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key",
              "echo -e '\n\n\n Upgrading yum package manager'",
              "yum upgrade -y",
              "echo -e '\n\n\n Installing amazon-linux-extras'",
              "yum install -y amazon-linux-extras",
              "echo -e '\n\n\n Installing java-openjdk11'",
              "amazon-linux-extras install java-openjdk11 -y",
              "echo -e '\n\n\n Installing Jenkins'",
              "yum install jenkins -y",
              "echo -e '\n\n\n Enabling Jenkins in systemctl'",
              "systemctl enable jenkins",
              "echo -e '\n\n\n Starting Jenkins in systemctl'",
              "systemctl start jenkins"]]

Outputs:
  AsgLaunchTemplateId:
    Description: Id of auto-scaling group launch template
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-asg-launch-template-id"
  AsgLaunchTemplateVersion:
    Description: Latest version of auto-scaling group launch template
    Value: !GetAtt [LaunchTemplate, LatestVersionNumber]
    Export:
      Name: !Sub "${AWS::StackName}-asg-launch-template-version"
  EncryptionKey:
    Description: Id of encryption key
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub "${AWS::StackName}-crypt-sym-key"
