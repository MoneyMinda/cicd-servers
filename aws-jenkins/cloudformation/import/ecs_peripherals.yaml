AWSTemplateFormatVersion: "2010-09-09"


Description: Stack template for creating a single virtual machine host



Parameters:
  ProjectNameParam:
    Type: String
    Description: Enter value for project name tag
    Default: "network"

  EnvParam:
    Type: String
    Description: Enter value for environment tag
    Default: "dev"
    AllowedValues:
      - "prod"
      - "dev"
      - "qa"
      - "test"

  ResourceRandom:
    Type: String
    Description: Characters appended to resource name to differentiate stack resources

  NetworkStackVpcId:
    Type: "String"
    Description: Id of exported Vpc in networking stack

  NetworkStackVpcCidrBlockIpv4:
    Type: "String"
    Description: Ipv4 Cidr of exported Vpc in networking stack

  NetworkStackPublicSubnetIds:
    Type: "String"
    Description: List of exported public subnet ids in networking stack

  NetworkStackPrivateSubnetIds:
    Type: "String"
    Description: List of exported private subnet ids in networking stack

  NetworkStackSubnetAzs:
    Type: "String"
    Description: List of exported subnet azs in networking stack

  InternetCidrBlockIpv4:
    Type: String
    Description: IPv4 CIDR Block for Internet
    Default: "0.0.0.0/0"

  InternetCidrBlockIpv6:
    Type: String
    Description: IPv6 CIDR Block for Internet
    Default: "::/0"


Mappings:
  InstanceTypes:
    dev:
      "instanceType": "t3.small"
    test:
      "instanceType": "t4g.xlarge"
    prod:
      "instanceType": "t4g.2xlarge"


Resources:
  SshKey:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Sub "${ProjectNameParam}-vm-sshkey-${ResourceRandom}-${EnvParam}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-vm-sshkey-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "Symmetric encryption key for server ${ProjectNameParam}"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub "${ProjectNameParam}-key-${ResourceRandom}-${EnvParam}"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt [InstanceRole, Arn]
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/developer-admin'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: "SYMMETRIC_DEFAULT"
      KeyUsage: "ENCRYPT_DECRYPT"
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-crypt-sym-key-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  PublicSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Sg for public server host
      GroupName: !Sub "${ProjectNameParam}-pub-sg-${ResourceRandom}-${EnvParam}"
      VpcId:
        Fn::ImportValue: !Ref NetworkStackVpcId
      SecurityGroupIngress:
        - CidrIp: !Ref InternetCidrBlockIpv4
          Description: "All Ipv4"
          ToPort: -1
          IpProtocol: "-1"
        - CidrIpv6: !Ref InternetCidrBlockIpv6
          Description: "All Ipv6"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      SecurityGroupEgress:
          - CidrIp: !Ref InternetCidrBlockIpv4
            Description: "All Ipv4"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
          - CidrIpv6: !Ref InternetCidrBlockIpv6
            Description: "All Ipv6"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-pub-sg-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  PublicSecurityGroupIngressSelfRef:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref PublicSecurityGroup
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      Description: "self reference"
      FromPort: -1
      ToPort: -1
      IpProtocol: "-1"

  PrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Sg for public server host
      GroupName: !Sub "${ProjectNameParam}-priv-sg-${ResourceRandom}-${EnvParam}"
      VpcId:
        Fn::ImportValue: !Ref NetworkStackVpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: "Public Subnet"
          ToPort: -1
          IpProtocol: "-1"
        - CidrIp:
            Fn::ImportValue: !Ref NetworkStackVpcCidrBlockIpv4
          Description: "Local traffic"
          ToPort: -1
          IpProtocol: "-1"
      SecurityGroupEgress:
          - CidrIp: !Ref InternetCidrBlockIpv4
            Description: "All Ipv4"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
          - CidrIpv6: !Ref InternetCidrBlockIpv6
            Description: "All Ipv6"
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-priv-sg-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  PrivateSecurityGroupIngressSelfRef:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref PrivateSecurityGroup
      SourceSecurityGroupId: !Ref PrivateSecurityGroup
      Description: "self reference"
      FromPort: -1
      ToPort: -1
      IpProtocol: "-1"

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectNameParam}-ec2-role-${ResourceRandom}-${EnvParam}"
      Path: "/developer/"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DeveloperPermissionBoundaryPolicy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: JenkinsPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn: InstanceRole
    Properties:
      InstanceProfileName: !Sub "${ProjectNameParam}-ec2-ip-${ResourceRandom}-${EnvParam}"
      Path: "/developer/"
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${ProjectNameParam}-launch-template-${ResourceRandom}-${EnvParam}"
      LaunchTemplateData:
        KeyName: !Ref SshKey
        InstanceType: !FindInMap [InstanceTypes, !Ref EnvParam, instanceType]
        ImageId: "ami-005f9685cb30f234b"
        IamInstanceProfile:
          Arn: !GetAtt [InstanceProfile, Arn]
        Monitoring:
          Enabled: true
        PrivateDnsNameOptions:
          EnableResourceNameDnsARecord: true
          HostnameType: "resource-name"
        BlockDeviceMappings:
          - DeviceName: "/dev/sdz"
            Ebs:
              DeleteOnTermination: True
              Encrypted: True
              VolumeSize: 50
              VolumeType: "gp3"
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join: ["\n\n", [
              "#!/bin/bash",
              "echo -e '\n\n\n Updating package repository'",
              "yum update -y",
              "echo -e '\n\n\n Installing SSM agent'",
              "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
              "echo -e '\n\n\n Installing EC2 connect agent'",
              "yum install -y ec2-instance-connect",
              "echo -e '\n\n\n Setting up Jenkins Repo'",
              "wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo",
              "echo -e '\n\n\n Import public key file'",
              "rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key",
              "echo -e '\n\n\n Upgrading yum package manager'",
              "yum upgrade -y",
              "echo -e '\n\n\n Installing amazon-linux-extras'",
              "yum install -y amazon-linux-extras",
              "echo -e '\n\n\n Installing java-openjdk11'",
              "amazon-linux-extras install java-openjdk11 -y",
              "echo -e '\n\n\n Installing Jenkins'",
              "yum install jenkins -y",
              "echo -e '\n\n\n Enabling Jenkins in systemctl'",
              "systemctl enable jenkins",
              "echo -e '\n\n\n Starting Jenkins in systemctl'",
              "systemctl start jenkins"]]


Outputs:
  AsgLaunchTemplateId:
    Description: Id of auto-scaling group launch template
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-asg-launch-template-id"

  AsgLaunchTemplateVersion:
    Description: Latest version of auto-scaling group launch template
    Value: !GetAtt [LaunchTemplate, LatestVersionNumber]
    Export:
      Name: !Sub "${AWS::StackName}-asg-launch-template-version"

  EncryptionKey:
    Description: Id of encryption key
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub "${AWS::StackName}-crypt-sym-key"

  PrivateSecurityGroup:
    Description: Id of private security group created in this template
    Value: !GetAtt PrivateSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-priv-sg"

  PublicSecurityGroup:
    Description: Id of public security group created in this template
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-pub-sg"
