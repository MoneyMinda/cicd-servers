AWSTemplateFormatVersion: "2010-09-09"


Description: Stack template for creating a single virtual machine host



Parameters:
  ProjectNameParam:
    Type: String
    Description: Enter value for project name tag
    Default: "network"

  EnvParam:
    Type: String
    Description: Enter value for environment tag
    Default: "dev"
    AllowedValues:
      - "prod"
      - "dev"
      - "qa"
      - "test"

  ResourceRandom:
    Type: String
    Description: Characters appended to resource name to differentiate stack resources

  NetworkStackVpcId:
    Type: "String"
    Description: Id of exported Vpc in networking stack

  NetworkStackVpcCidrBlockIpv4:
    Type: "String"
    Description: Ipv4 Cidr of exported Vpc in networking stack

  NetworkStackPublicSubnetIds:
    Type: "String"
    Description: List of exported public subnet ids in networking stack

  NetworkStackPrivateSubnetIds:
    Type: "String"
    Description: List of exported private subnet ids in networking stack

  NetworkStackSubnetAzs:
    Type: "String"
    Description: List of exported subnet azs in networking stack

  InternetCidrBlockIpv4:
    Type: String
    Description: IPv4 CIDR Block for Internet
    Default: "0.0.0.0/0"

  InternetCidrBlockIpv6:
    Type: String
    Description: IPv6 CIDR Block for Internet
    Default: "::/0"

  AsgLaunchTemplateId:
    Type: String
    Description: Id of exported asg launch template in cluster-addendum stack

  AsgLaunchTemplateVersion:
    Type: String
    Description: Version of exported asg launch template in cluster-addendum stack

  EncryptionKey:
    Type: String
    Description: Id of symmetric encrypt/decrypt key in cluster-addendum stack


Mappings:
  InstanceTypes:
    dev:
      "instanceType": "t3.small"
    test:
      "instanceType": "t4g.xlarge"
    prod:
      "instanceType": "t4g.2xlarge"
  CidrBlockMap:
    InternetBlockIpv4:
      "block": "0.0.0.0/0"
    InternetBlockIpv6:
      "block": "::/0"
    VpcBlock:
      "block": "10.0.0.0/16"
    PublicBlock1:
      "block": "10.0.0.0/24"
    PrivateBlock1:
      "block": "10.0.1.0/24"
    PublicBlock2:
      "block": "10.0.2.0/24"
    PrivateBlock2:
      "block": "10.0.3.0/24"


Resources:
  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${ProjectNameParam}-ecs-ec2-${ResourceRandom}-${EnvParam}"
      ClusterSettings:
        - Name: "containerInsights"
          Value: "enabled"
      Configuration:
         ExecuteCommandConfiguration:
           KmsKeyId:
            Fn::ImportValue: !Ref EncryptionKey
           LogConfiguration:
             CloudWatchEncryptionEnabled: true
             CloudWatchLogGroupName: !Sub "${ProjectNameParam}-ecs-ec2-${ResourceRandom}-${EnvParam}"
             S3BucketName: !Sub "${ProjectNameParam}-ecs-ec2-${ResourceRandom}-${EnvParam}"
             S3EncryptionEnabled: true
             S3KeyPrefix: "logs"
           Logging: "OVERRIDE"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-ecs-ec2-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  MainCapacityProvider: # For main node
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref MainAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 400
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 2
      Name: !Sub "${ProjectNameParam}-main-cap-prov-${ResourceRandom}-${EnvParam}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-main-cap-prov-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  WorkerCapacityProvider: # For worker nodes
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref WorkerAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 400
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: "ENABLED"
          TargetCapacity: 5
      Name: !Sub "${ProjectNameParam}-worker-cap-prov-${ResourceRandom}-${EnvParam}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-worker-cap-prov-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam

  ClusterCapacityProviderAssociations:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    Properties:
      CapacityProviders:
        - !Ref WorkerCapacityProvider
      Cluster: !Ref Cluster
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref WorkerCapacityProvider
          Base: 1
          Weight: 1

  MainAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "${ProjectNameParam}-main-asg-${ResourceRandom}-${EnvParam}"
      CapacityRebalance: true
      DesiredCapacity: "2"
      DesiredCapacityType: "units"
      HealthCheckGracePeriod: 300
      HealthCheckType: "EC2"
      LaunchTemplate:
          LaunchTemplateId:
            Fn::ImportValue: !Ref AsgLaunchTemplateId
          Version:
            Fn::ImportValue: !Ref AsgLaunchTemplateVersion
      MaxSize: "2"
      MetricsCollection:
        - Granularity: "1Minute"
      MinSize: "1"
      TargetGroupARNs:
        - !Ref NetworkLoadBalancerTargetGroup
      VPCZoneIdentifier:
        Fn::Split:
          - ","
          - Fn::ImportValue: !Ref NetworkStackPrivateSubnetIds

  WorkerAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub "${ProjectNameParam}-worker-asg-${ResourceRandom}-${EnvParam}"
      CapacityRebalance: true
      DesiredCapacity: "1"
      DesiredCapacityType: "units"
      HealthCheckGracePeriod: 300
      HealthCheckType: "EC2"
      LaunchTemplate:
        LaunchTemplateId:
          Fn::ImportValue: !Ref AsgLaunchTemplateId
        Version:
          Fn::ImportValue: !Ref AsgLaunchTemplateVersion
      MaxSize: "5"
      MetricsCollection:
        - Granularity: "1Minute"
      MinSize: "1"
      VPCZoneIdentifier:
        Fn::Split:
          - ","
          - Fn::ImportValue: !Ref NetworkStackPrivateSubnetIds

  NetworkLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: "ipv4"
      Name: !Sub "${ProjectNameParam}-nlb-${ResourceRandom}-${EnvParam}"
      Scheme: "internet-facing"
      Subnets:
        Fn::Split:
          - ","
          - Fn::ImportValue: !Ref NetworkStackPublicSubnetIds
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-nlb-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam
      Type: "network"

  NetworkLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: "8080"
      HealthCheckProtocol: "TCP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: "5"
      IpAddressType: "ipv4"
      Name: !Sub "${ProjectNameParam}-nlb-tg-${ResourceRandom}-${EnvParam}"
      Port: "8080"
      Protocol: "TCP"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-nlb-tg-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam
      TargetGroupAttributes:
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - Key: "preserve_client_ip.enabled"
          Value: "false"
      TargetType: "instance"
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Ref NetworkStackVpcId

  NetworkLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: "8080"
      Protocol: "TCP"

  BastionHost:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
         LaunchTemplateId: !Ref LaunchTemplate
         Version: !GetAtt [LaunchTemplate, LatestVersionNumber]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectNameParam}-ec2-${ResourceRandom}-${EnvParam}"
        - Key: project
          Value: !Ref ProjectNameParam
        - Key: env
          Value: !Ref EnvParam


Outputs:
  NlbDnsName:
    Description: Public IP of the EC2 instance created
    Value: !GetAtt [NetworkLoadBalancer, DNSName]
